# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-13 11:29
from __future__ import unicode_literals

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_mysql.models
import eventmanager_app.models
import s3direct.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', eventmanager_app.models.AccountUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agenda',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agenda', django_mysql.models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_upload', models.FileField(upload_to='assets')),
                ('asset_name', models.CharField(max_length=50)),
                ('asset_type', models.CharField(choices=[('DOC', 'Document'), ('PPT', 'Presentation')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(default=None, max_length=30)),
                ('company_address', models.CharField(default=None, max_length=150)),
                ('company_type', models.CharField(default=None, max_length=30)),
                ('main_contact_name', models.CharField(default=None, max_length=30)),
                ('main_contact_surname', models.CharField(default=None, max_length=30)),
                ('main_contact_email', models.CharField(default=None, max_length=60)),
                ('customer_status', models.CharField(default=None, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('name', models.CharField(default=None, max_length=100)),
                ('surname', models.CharField(default=None, max_length=100)),
                ('email', models.EmailField(default=None, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Speakers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker_name', models.CharField(default=None, max_length=30)),
                ('speaker_surname', models.CharField(default=None, max_length=30)),
                ('speaker_email', models.CharField(default=None, max_length=60)),
                ('speaker_title', models.CharField(default=None, max_length=60)),
                ('speaker_bio', models.CharField(blank=True, default=None, max_length=60)),
                ('speaker_pic_url', models.ImageField(blank=True, default=None, upload_to='speakers', verbose_name='Upload Main Image')),
            ],
        ),
        migrations.CreateModel(
            name='Thumbnails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webcast_image', models.ImageField(blank=True, default='marverhigres.png', upload_to=eventmanager_app.models.webcast_image_path, verbose_name='Upload Main Image')),
            ],
        ),
        migrations.CreateModel(
            name='Webcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('webcast_status', models.CharField(choices=[('OD', 'ON-DEMAND'), ('LIVE', 'LIVE')], default=None, max_length=30, verbose_name='Webcast Type')),
                ('webcast_title', models.CharField(default=None, max_length=150)),
                ('webcast_date', models.DateField(default=None)),
                ('webcast_time', models.TimeField(default=None)),
                ('webcast_img', models.ImageField(blank=True, default='marverhigres.png', upload_to=eventmanager_app.models.webcast_image_path, verbose_name='Upload Main Image')),
                ('webcast_description', models.TextField(blank=True)),
                ('webcast_video', s3direct.fields.S3DirectField(blank=True, verbose_name='On-Demand Video Upload')),
                ('customer_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eventmanager_app.Customers')),
                ('speaker_id', models.ManyToManyField(blank=True, to='eventmanager_app.Speakers', verbose_name='Speakers Creation/Selection ')),
                ('webcast_asset_ID', models.ManyToManyField(blank=True, to='eventmanager_app.Assets', verbose_name='Select Assets')),
            ],
        ),
        migrations.AddField(
            model_name='thumbnails',
            name='webcast_id',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eventmanager_app.Webcast'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='webcast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eventmanager_app.Webcast'),
        ),
        migrations.AddField(
            model_name='agenda',
            name='webcast_id',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='eventmanager_app.Webcast'),
        ),
    ]
